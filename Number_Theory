#include "Function_Library"
#include<thread>
#include<future>
#pragma once

 namespace CAS::Number_Theory {
 
 
  bool       is_int(double a){
             return static_cast<i_64>(a)== a ;
             }
 
 
  i_64       gcd(i_64 a, i_64 b){
             while ((a %= b) && (b %= a));
             return (a + b);
             }
     /*        
  i_64       gcd_vec(i_64 array[], i_64 length){
  
             } */          
                                                //Coprime test
   bool      is_coprime(i_64 a, i_64 b){
             return gcd(a,b)==1 ;//? true:false;
             }            
                                       // Least common multiple
   i_64      lcm(i_64 a, i_64 b){
             return (a*b)/gcd(a,b);
             }
                                      // Euler phi (totient) function, coprime counter (improve this!)
   i_64      phi(i_64 a){
             i_64 b{0};
             for (i_64 i{1};i< a; i++)
             if (gcd(a,i) == 1){
             b+=1;
             }
             return b;   
             }       
                                     // integer floor function 
   i_64      floor(i_64 a, i_64 b){
             if (a >  b){
             a/=b;
             }
             return a*b;
             }
             
   



                                        //primality by trial division
  bool       is_prime(i_64 a){
             if(a!=2 && a%2 == 0 || a==1){
             return false;
             }
             else{ 
             //constexpr i_64 sqrt_a = sqrt(a)
             for (i_64 i{3}; i*i<=a; i+=2) {
             if (a%i ==0){
             return false;
             }
             }
             return true;
             }
             } 


  i_64      pi_func(i_64 upper_bound, i_64 lower_bound=1){
            int prime_count=0;
            for (i_64 i=lower_bound; i<upper_bound;i++){
            if(is_prime(i)){
            prime_count++;
            }
            }
            return prime_count;
            }
            
       void func(std::promise<i_64> && p, i_64 x, i_64 y) {
                  p.set_value(CAS::Number_Theory::pi_func(x,y));
            }

    i_64     parallel_pi(i_64 x, i_64 y){
             std::promise<i_64> a,b;
             std::future<i_64> c= a.get_future();
             std::future<i_64> d=b.get_future();
  
             std::thread e(&func, std::move(a),((x-y)/3)*2+y,y); //initalizing thread 1 (1 to x/2)
             std::thread f(&func, std::move(b),x,((x-y)/3)*2+y); //initializing thread 2 (x/2 to 2/3 x)
             e.join();
             f.join();
             return c.get() + d.get();
         }          



  bool       is_strong(i_64 a){
             i_64 next_prime=a+1, past_prime=a-1;
             if(is_prime(a)==1){
             while(is_prime(next_prime)!=1){
             next_prime++;
             }
             while(is_prime(past_prime)!=1){
             past_prime--;
             }
             }
             return ((next_prime+past_prime)>>1) < a ? true: false;
             }
             
             
  bool       is_sophie(i_64 a){
             return is_prime(a)&is_prime(a*2 +1);   //Pocklington test gcd(2^((safe_prime -1)/sophie)-1,safe_prime)
             }           
             
  bool       is_square(f_128 a){
             return CAS::Elementary::nsqrt<i_64>(a)*CAS::Elementary::nsqrt<i_64>(a)==a ;
             }    
       /*      
  bool       squarefree(f_128 a){
  
             }             
          */                                
  i_64       nearest_sqre(i_64 a){
             return std::round(CAS::Elementary::nsqrt<f_64>(a))* std::round(CAS::Elementary::nsqrt<f_64>(a));
             }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 }
